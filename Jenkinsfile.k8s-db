pipeline {
    agent any
    
    stages {
        stage('Setup Kubernetes') {
            steps {
                script {
                    // Usar el kubectl de minikube automÃ¡ticamente
                    withEnv(['PATH+MINIKUBE=C:/Program Files/Docker/Docker/resources/bin']) {
                        sh 'minikube kubectl -- version --client'
                    }
                }
            }
        }
        
        stage('Deploy MySQL') {
            steps {
                script {
                    withEnv(['PATH+MINIKUBE=C:/Program Files/Docker/Docker/resources/bin']) {
                        echo 'Desplegando MySQL en Kubernetes...'
                        
                        sh '''
                            minikube kubectl -- apply -f mysql-secret.yaml
                            minikube kubectl -- apply -f mysql-configmap.yaml
                            minikube kubectl -- apply -f mysql-pvc.yaml
                            minikube kubectl -- apply -f mysql-deployment.yaml
                            minikube kubectl -- apply -f mysql-service.yaml
                        '''
                    }
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                script {
                    withEnv(['PATH+MINIKUBE=C:/Program Files/Docker/Docker/resources/bin']) {
                        timeout(time: 5, unit: 'MINUTES') {
                            waitUntil {
                                try {
                                    def status = sh(
                                        script: 'minikube kubectl -- get pods -l app=mysql -o jsonpath="{.items[0].status.phase}"',
                                        returnStdout: true
                                    ).trim()
                                    echo "Estado del pod: ${status}"
                                    return status == "Running"
                                } catch (Exception e) {
                                    echo "Esperando que el pod estÃ© listo..."
                                    return false
                                }
                            }
                        }
                        
                        sh '''
                            echo "=== Pods ==="
                            minikube kubectl -- get pods -l app=mysql
                            echo "=== Services ==="
                            minikube kubectl -- get svc mysql-service
                            echo "=== PVCs ==="
                            minikube kubectl -- get pvc
                        '''
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo "Build Status: ${currentBuild.currentResult}"
        }
        success {
            echo 'ðŸŽ‰ Despliegue de MySQL completado con Ã©xito!'
        }
        failure {
            echo 'ðŸ’¥ El despliegue fallÃ³. Revisar logs para mÃ¡s detalles.'
        }
    }
}