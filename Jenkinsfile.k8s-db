pipeline {
    agent any
    
    environment {
        KUBECONFIG = credentials('kubeconfig')
    }
    
    stages {
        stage('Deploy MySQL Resources') {
            steps {
                script {
                    echo 'Desplegando MySQL en Kubernetes...'
                    
                    // Aplicar todos los archivos YAML en orden
                    sh 'kubectl apply -f mysql-secret.yaml'
                    sh 'kubectl apply -f mysql-configmap.yaml' 
                    sh 'kubectl apply -f mysql-pvc.yaml'
                    sh 'kubectl apply -f mysql-deployment.yaml'
                    sh 'kubectl apply -f mysql-service.yaml'
                }
            }
        }
        
        stage('Wait for MySQL Ready') {
            steps {
                script {
                    timeout(time: 5, unit: 'MINUTES') {
                        waitUntil {
                            def status = sh(
                                script: 'kubectl get pods -l app=mysql -o jsonpath="{.items[0].status.phase}"',
                                returnStdout: true
                            ).trim()
                            echo "Estado del pod: ${status}"
                            return status == "Running"
                        }
                    }
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                script {
                    echo '=== Verificando el despliegue ==='
                    sh 'kubectl get pods -l app=mysql'
                    sh 'kubectl get svc mysql-service'
                    sh 'kubectl get pvc'
                }
            }
        }
    }
    
    post {
        always {
            echo "Pipeline ${currentBuild.result ?: 'SUCCESS'} - Finalizado"
        }
        success {
            echo '✅ MySQL desplegado exitosamente!'
        }
        failure {
            echo '❌ Error en el despliegue de MySQL'
            // Rollback manual o notificaciones aquí
        }
    }
}