pipeline {
    agent any  // Esto provee el contexto 'node' necesario
    
    environment {
        KUBECONFIG = credentials('kubeconfig')
    }
    
    stages {
        stage('Backup Current Deployment') {
            steps {
                script {
                    // Hacer backup de la configuración actual
                    sh '''
                        kubectl get deployment mysql-deployment -o yaml > mysql-deployment-backup.yaml || true
                        kubectl get configmap mysql-config -o yaml > mysql-config-backup.yaml || true
                    '''
                }
            }
        }
        
        stage('Deploy MySQL') {
            steps {
                script {
                    try {
                        sh '''
                            kubectl apply -f mysql-secret.yaml
                            kubectl apply -f mysql-configmap.yaml
                            kubectl apply -f mysql-pvc.yaml
                            kubectl apply -f mysql-deployment.yaml
                            kubectl apply -f mysql-service.yaml
                        '''
                    } catch (Exception e) {
                        echo "Error en el despliegue: ${e.message}"
                        currentBuild.result = 'FAILURE'
                        error "Despliegue fallido"
                    }
                }
            }
        }
        
        stage('Health Check with Retry') {
            steps {
                script {
                    retry(3) {
                        sh '''
                            kubectl wait --for=condition=ready pod -l app=mysql --timeout=180s
                        '''
                    }
                }
            }
        }
    }
    
    post {
        failure {
            script {
                echo "⚠️  Despliegue fallido - realizando rollback automático"
                sh '''
                    kubectl delete -f mysql-deployment.yaml --ignore-not-found=true
                    kubectl apply -f mysql-deployment-backup.yaml --ignore-not-found=true
                '''
            }
        }
        always {
            script {
                echo "Pipeline completado - limpiando archivos temporales"
                // Limpiar archivos de backup
                sh '''
                    rm -f mysql-deployment-backup.yaml mysql-config-backup.yaml || true
                '''
            }
        }
        success {
            echo "✅ Despliegue de MySQL completado exitosamente"
        }
    }
}