pipeline {
    agent any
    
    environment {
        KUBECONFIG = credentials('kubeconfig')
    }
    
    stages {
        stage('Validate YAML Files') {
            steps {
                script {
                    def yamlFiles = [
                        'mysql-secret.yaml',
                        'mysql-configmap.yaml', 
                        'mysql-pvc.yaml',
                        'mysql-deployment.yaml',
                        'mysql-service.yaml'
                    ]
                    
                    yamlFiles.each { file ->
                        sh "kubectl apply --dry-run=client -f ${file}"
                        echo "âœ… ${file} - ValidaciÃ³n exitosa"
                    }
                }
            }
        }
        
        stage('Deploy MySQL') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) {
                        sh '''
                            kubectl apply -f mysql-secret.yaml
                            kubectl apply -f mysql-configmap.yaml
                            sleep 5
                            kubectl apply -f mysql-pvc.yaml
                            sleep 5
                            kubectl apply -f mysql-deployment.yaml
                            kubectl apply -f mysql-service.yaml
                        '''
                    }
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                script {
                    timeout(time: 10, unit: 'MINUTES') {
                        waitUntil {
                            try {
                                def podStatus = sh(
                                    script: 'kubectl get pod -l app=mysql -o jsonpath="{.items[0].status.phase}"',
                                    returnStdout: true
                                ).trim()
                                
                                def readyContainers = sh(
                                    script: 'kubectl get pod -l app=mysql -o jsonpath="{.items[0].status.containerStatuses[0].ready}"',
                                    returnStdout: true
                                ).trim()
                                
                                return podStatus == "Running" && readyContainers == "true"
                            } catch (Exception e) {
                                echo "Esperando que el pod estÃ© listo..."
                                return false
                            }
                        }
                    }
                    
                    // Verificaciones finales
                    sh '''
                        echo "=== Pods ==="
                        kubectl get pods -l app=mysql
                        echo "=== Services ==="
                        kubectl get svc mysql-service
                        echo "=== PVCs ==="
                        kubectl get pvc
                    '''
                }
            }
        }
    }
    
    post {
        always {
            echo "Build Status: ${currentBuild.currentResult}"
        }
        success {
            echo 'ðŸŽ‰ Despliegue de MySQL completado con Ã©xito!'
        }
        failure {
            echo 'ðŸ’¥ El despliegue fallÃ³. Revisar logs para mÃ¡s detalles.'
        }
    }
}